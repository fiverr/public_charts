userData: |
  CLUSTER_NAME={{ $.Values.clusterName }}
  INSTANCEGROUP={{ .value.nodeGroupLabel | default .key }}
  INSTANCE_ID=`/usr/bin/ec2-metadata --instance-id | awk '{print $2}'`
  ID_SUFFIX=`/usr/bin/ec2-metadata --instance-id | awk '{print substr($0,length-3,4)}'`
  HOSTNAME="${CLUSTER_NAME}-${INSTANCEGROUP}-$ID_SUFFIX"
  hostname $HOSTNAME
  echo $HOSTNAME > /etc/hostname
  aws ec2 create-tags --resources $INSTANCE_ID --tags=Key=Name,Value=$HOSTNAME
  sed -i "s/127.0.0.1 [0-9a-z-]*\s*localhost/127.0.0.1 $HOSTNAME localhost/" /etc/hosts
  # Sysctl changes
  {{ if ( .disableIPv6 | default $.Values.disableIPv6) }}
  ## Disable IPv6
  cat <<EOF > /etc/sysctl.d/10-disable-ipv6.conf
  # disable ipv6 config
  net.ipv6.conf.all.disable_ipv6 = 1
  net.ipv6.conf.default.disable_ipv6 = 1
  net.ipv6.conf.lo.disable_ipv6 = 1
  systemctl restart systemd-sysctl.service
  EOF
  {{ end }}
  #Increase RegistryQPS
  echo "$(jq '.registryPullQPS=100' /etc/kubernetes/kubelet/kubelet-config.json)" > /etc/kubernetes/kubelet/kubelet-config.json
  echo "$(jq '.registryBurst=200' /etc/kubernetes/kubelet/kubelet-config.json)" > /etc/kubernetes/kubelet/kubelet-config.json
  {{ if (.value.registryCache | default $.Values.registryCache) }}
  #Registry Cache
  mkdir -p /etc/containerd/certs.d/{{ .value.registry | default $.Values.registry }}
  cat<<EOF>/etc/containerd/certs.d/{{ .value.registry | default $.Values.registry }}/hosts.toml
  server = "https://{{ .value.registry | default $.Values.registry }}"
  [host."{{ .value.registryHost | default $.Values.registryHost }}"]
    capabilities = ["pull", "resolve"]
    {{- if .value.registrySkipVerify | default $.Values.registrySkipVerify }}
    skip_verify = true
    {{- end }}
  EOF
  {{- end }}
